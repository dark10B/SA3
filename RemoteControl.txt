package RemoteControl;

public interface Command {
	public void execute();
}

package RemoteControl;

public class NoCommand implements Command{
	public void execute()
	{}

}

package RemoteControl;

public class Ac 
{
	String a;
	public Ac(String string)
	{
		this.a=string;
	}
	
	public void powerOn()
	{
		System.out.println(a+" AC is ON.");
	}
	public void powerOff()
	{
		System.out.println(a+" AC is OFF.");
	}
}


package RemoteControl;

public class AcOffCommand implements Command{
	Ac ac;
	public AcOffCommand(Ac ac)
	{
		this.ac=ac;
	}
	public void execute()
	{
		ac.powerOff();
	}
}


package RemoteControl;

public class AcOnCommand implements Command{
	Ac ac;
	public AcOnCommand(Ac ac)
	{
		this.ac=ac;
	}
	public void execute()
	{
		ac.powerOn();
	}
}

package RemoteControl;

public class RemoteControl 
{
	Command[] onCommands;
	Command[] offCommands;
	
	public RemoteControl()
	{
		onCommands=new Command[3];
		offCommands=new Command[3];
		
		Command noCommand=new NoCommand();
		
		for(int i=0;i<3;i++)
		{
			onCommands[i]=noCommand;
			offCommands[i]=noCommand;
		}
	}
	
	public void setCommand(int slot,Command onCommand, Command offCommand)
	{
		onCommands[slot]=onCommand;
		offCommands[slot]=offCommand;
	}
	
	public void onButtonPushed(int slot)
	{
		onCommands[slot].execute();
	}
	public void offButtonPushed(int slot)
	{
		offCommands[slot].execute();
	}
}

package RemoteControl;

public class RemoteLoader {
	public static void main(String args[])
	{
		RemoteControl remoteControl=new RemoteControl();
		
		Ac BedRoomAc=new Ac("Bed room");
		AcOnCommand BedRoomAcOn=new AcOnCommand(BedRoomAc);
		AcOffCommand BedRoomAcOff=new AcOffCommand(BedRoomAc);
		
		remoteControl.setCommand(0, BedRoomAcOn, BedRoomAcOff);
		
		remoteControl.onButtonPushed(0);
		remoteControl.offButtonPushed(0);
	}
}





